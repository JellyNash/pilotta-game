/* PlayerHand Flexbox Layout - Modern responsive approach */

/* 
 * Flexbox-based card layout system
 * Eliminates absolute positioning for better responsiveness
 * Prevents clipping issues with proper flex item management
 */

/* Variables from tokens.css */

/* Base wrapper */
.ph-flex-wrapper {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: visible;
  z-index: inherit;
  padding: var(--space-xs); /* Add small padding to prevent edge clipping */
}

/* Ensure AI hands stay within relative area */
.ph-flex-wrapper[data-position="north"],
.ph-flex-wrapper[data-position="east"],
.ph-flex-wrapper[data-position="west"] {
  overflow: hidden;
}

/* Flex container for cards */
.ph-flex-container {
  display: flex;
  flex-flow: row nowrap; /* Keep cards in single row */
  gap: var(--ph-card-gap, var(--card-gap));
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  max-width: 100%;
  overflow: visible;
  padding: var(--ph-container-padding, 1rem);
}

/* Card slot as flex item */
.ph-flex-card {
  /* Flex item properties */
  flex: 0 1 auto; /* Don't grow, can shrink, auto basis */
  min-width: 44px; /* Minimum touch target */
  min-height: 44px; /* Minimum touch target */
  
  /* Static positioning - no absolute! */
  position: relative;
  
  /* Dynamic card dimensions with min/max constraints */
  --dynamic-card-width: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale));
  --dynamic-card-height: calc(var(--card-height) * var(--ph-card-scale) * var(--card-scale));
  
  width: var(--dynamic-card-width);
  height: var(--dynamic-card-height);
  
  /* Transitions */
  transition: all var(--card-transition);
  
  /* Z-index management - increment for each card */
  z-index: calc(var(--z-card-base) + var(--card-index, 0));
}

/* Ensure card content is responsive */
.ph-flex-card > * {
  max-width: 100%;
  height: auto;
  object-fit: contain;
}

/* SOUTH PLAYER - Arc effect with transforms only */
.ph-flex-wrapper[data-position="south"] .ph-flex-container {
  /* Dynamic width based on viewport */
  width: min(95vw, 800px);
  max-width: 100%;
  padding: clamp(1rem, 3vw, 3rem) clamp(0.5rem, 2vw, 2rem);

  /* Perspective for 3D arc effect */
  perspective: 1000px;

  /* Allow shrinking if needed */
  min-width: 0;
}

/* Use adjusted rotation step for south player */
.ph-flex-wrapper[data-position="south"] {
  --adjusted-rotation-step: calc(var(--ph-arc-rotation-step) * var(--south-card-spacing));
}

.ph-flex-wrapper[data-position="south"] .ph-flex-card {
  /* Apply south specific size */
  --dynamic-card-width: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale) * var(--south-card-size));
  --dynamic-card-height: calc(var(--card-height) * var(--ph-card-scale) * var(--card-scale) * var(--south-card-size));

  /* Each card gets transform for arc position using --card-index */
  transform-origin: center bottom;
  transform:
    rotateZ(calc(var(--adjusted-rotation-step) * var(--card-index)))
    translateY(
      calc(
        var(--ph-arc-lift-min) +
        var(--ph-arc-lift-step) * max(var(--card-index), calc(-1 * var(--card-index)))
      )
    );
}

/* Hover states */
.ph-flex-wrapper[data-position="south"] .ph-flex-card:hover {
  z-index: var(--z-card-hover);

  --hover-rotation: calc(var(--adjusted-rotation-step) * var(--card-index));
  --hover-y: calc(
    var(--ph-arc-lift-min) +
    var(--ph-arc-lift-step) * max(var(--card-index), calc(-1 * var(--card-index)))
  );
  transform:
    rotateZ(var(--hover-rotation))
    translateY(calc(var(--hover-y) - 20px))
    scale(1.05);
}

/* NORTH PLAYER - Compact horizontal layout */
.ph-flex-wrapper[data-position="north"] .ph-flex-container {
  gap: 0; /* Remove gap for overlapping */
  max-width: clamp(300px, 70vw, 600px); /* Increased max width for 50% overlap */
  justify-content: center;
}


.ph-flex-wrapper[data-position="north"] .ph-flex-card {
  flex: 0 0 auto;
  width: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale) * 0.7);

  /* Negative margin for overlap - using compact ratio */
  margin-right: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale) * calc(-1 * var(--card-overlap-compact)));
}

/* Last card shouldn't have negative margin */
.ph-flex-wrapper[data-position="north"] .ph-flex-card:last-child {
  margin-right: 0;
}

/* Dynamic overlap based on card count for North player */
.ph-flex-wrapper[data-position="north"][data-card-count="8"] .ph-flex-card {
  margin-right: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale) * calc(-1 * var(--card-overlap-tight)));
}

/* EAST/WEST PLAYERS - Vertical flex with rotation */
.ph-flex-wrapper[data-position="east"] .ph-flex-container,
.ph-flex-wrapper[data-position="west"] .ph-flex-container {
  flex-direction: column;
  gap: 0; /* Remove gap to allow overlapping */
  max-height: clamp(400px, 80vh, 700px); /* Increased for 50% overlap */
  justify-content: center;
}

.ph-flex-wrapper[data-position="east"] .ph-flex-card,
.ph-flex-wrapper[data-position="west"] .ph-flex-card {
  flex: 0 0 auto;
  width: calc(var(--card-width) * var(--ph-card-scale) * var(--card-scale) * 0.5);
  height: calc(var(--card-height) * var(--ph-card-scale) * var(--card-scale) * 0.5);

  /* Negative margin to create overlap - using compact ratio */
  margin-bottom: calc(var(--card-height) * var(--ph-card-scale) * var(--card-scale) * calc(-1 * var(--card-overlap-compact)));
}

/* Last card shouldn't have negative margin */
.ph-flex-wrapper[data-position="east"] .ph-flex-card:last-child,
.ph-flex-wrapper[data-position="west"] .ph-flex-card:last-child {
  margin-bottom: 0;
}

/* Dynamic overlap based on card count for East/West players */
.ph-flex-wrapper[data-position="east"][data-card-count="8"] .ph-flex-card,
.ph-flex-wrapper[data-position="west"][data-card-count="8"] .ph-flex-card {
  margin-bottom: calc(var(--card-height) * var(--ph-card-scale) * var(--card-scale) * calc(-1 * var(--card-overlap-tight)));
}

.ph-flex-wrapper[data-position="east"] .ph-flex-card {
  transform: rotate(90deg);
}

.ph-flex-wrapper[data-position="west"] .ph-flex-card {
  transform: rotate(-90deg);
}

/* Container responsive properties using clamp() */
.ph-flex-container {
  gap: clamp(0px, 0.5vw, var(--card-gap));
  padding: clamp(0.5rem, 1vw, 1rem);
}

/* Responsive card overlap using clamp() - fixed at 50% */
.ph-flex-wrapper[data-position="north"] .ph-flex-card {
  margin-right: calc(var(--dynamic-card-width) * -0.5);
}

.ph-flex-wrapper[data-position="east"] .ph-flex-card,
.ph-flex-wrapper[data-position="west"] .ph-flex-card {
  margin-bottom: calc(var(--dynamic-card-height) * -0.5);
}

/* Responsive arc effect for south player using clamp() and --card-index */
.ph-flex-wrapper[data-position="south"] .ph-flex-card {
  transform:
    rotateZ(
      clamp(
        -20deg,
        calc(var(--adjusted-rotation-step) * var(--card-index)),
        20deg
      )
    )
    translateY(
      clamp(
        15px,
        calc(
          var(--ph-arc-lift-min) +
          var(--ph-arc-lift-step) * max(var(--card-index), calc(-1 * var(--card-index)))
        ),
        30px
      )
    );
}

/* Structural changes still need media queries */
@media (width <= 640px) {
  /* Slightly reduce south arc on small screens */
  .ph-flex-wrapper[data-position="south"] .ph-flex-card {
    --adjusted-rotation-step: calc(4deg * var(--south-card-spacing));
  }
}

/* Handle overflow scenarios - EXTREME FALLBACK */
@media (width <= 480px) {
  /* For very small screens, use scroll for all positions */
  .ph-flex-wrapper .ph-flex-container {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
    max-width: 100%;
    max-height: 100%;
  }
  
  /* South player horizontal scroll */
  .ph-flex-wrapper[data-position="south"] .ph-flex-container {
    overflow: auto visible;
  }
  
  /* East/West vertical scroll */
  .ph-flex-wrapper[data-position="east"] .ph-flex-container,
  .ph-flex-wrapper[data-position="west"] .ph-flex-container {
    overflow: visible auto;
    max-height: 80vh;
  }
  
  /* Add scroll padding */
  .ph-flex-container::before,
  .ph-flex-container::after {
    content: '';
    flex: 0 0 0.5rem;
  }
}

/* Ensure selected state is visible */
.ph-flex-card.ph-selected {
  z-index: var(--z-card-selected);
  transform: scale(1.05);
  box-shadow: 0 0 var(--shadow-md) rgb(59 130 246 / 80%);
}

/* Keyboard selection state */
.ph-flex-card.ph-keyboard-selected {
  z-index: calc(var(--z-card-selected) - 5);
  transform: translateY(-12px) scale(1.02);
}

/* For south position, preserve arc rotation */
.ph-flex-wrapper[data-position="south"] .ph-flex-card.ph-keyboard-selected {
  transform: rotateZ(var(--hover-rotation, 0deg)) translateY(calc(var(--hover-y, 0px) - 25px)) scale(1.02);
}

/* Animation states */
.ph-flex-wrapper[data-hovering="true"] .ph-flex-card {
  transition: all 0.15s ease-out;
}

/* Prevent layout shift during animations */
.ph-flex-container {
  will-change: transform;
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* Container query support for dynamic card sizing */
@container (max-width: 400px) {
  .ph-flex-card {
    --dynamic-card-width: clamp(
      calc(var(--card-width) * 0.75),
      10vw,
      var(--card-width)
    );
    --dynamic-card-height: clamp(
      calc(var(--card-height) * 0.75),
      14vw,
      var(--card-height)
    );
  }
}

/* More aggressive mobile overlap */
@media (width <= 400px) {
  /* South player - more overlap for 8 cards */
  .ph-flex-wrapper[data-position="south"] .ph-flex-card {
    margin-right: calc(var(--dynamic-card-width) * -0.4);
  }
  
  /* Reduce arc effect on very small screens */
  .ph-flex-wrapper[data-position="south"] .ph-flex-card {
    --adjusted-rotation-step: calc(3deg * var(--south-card-spacing));
    --ph-arc-lift-step: 6px;
  }
  
  /* North player - extreme overlap */
  .ph-flex-wrapper[data-position="north"] .ph-flex-card {
    margin-right: calc(var(--dynamic-card-width) * -0.6);
  }
}

/* Minimum touch targets already defined in main .ph-flex-card rule above */